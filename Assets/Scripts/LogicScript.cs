using UnityEngine;
using UnityEngine.UI;
using UnityEngine.SceneManagement;
using System.Collections;

public class LogicScript : MonoBehaviour
{
    public int playerScore;
    public Text scoreText;
    private int highScore; // keep track of highest score
    public Text highScoreText; // display high score
    public GameObject gameOverScreen;
    public AudioSource gameOverSound;
    private bool hasPlayedGameOverSound = false; 
    public AudioSource pointsSound;
    public GameObject startScreen;
    public bool gameStarted = false;
    public float scorePopUpDuration = 0.5f;
    public float scorePopUpSize = 1.5f;
    

    public void Start()
    {
        highScore = PlayerPrefs.GetInt("HighScore", 0);
        highScoreText.text = highScore.ToString();
        Debug.Log("High Score Text updated!");
    }

    [ContextMenu("Increase Score")]
    public void addScore(int scoreToAdd){
        if (!gameOverScreen.activeSelf) // ensure score does not go up when "Game Over" screen is active
        {
            playerScore+= scoreToAdd;
            scoreText.text = playerScore.ToString();
            StartCoroutine(AnimateScore());
        }
        if (pointsSound != null) {
            pointsSound.Play();
        }
    }
    
    public void restartGame() {
        SceneManager.LoadScene(SceneManager.GetActiveScene().name);
    }

    public void gameOver(){
        if (gameOverScreen != null) 
        {
            gameOverScreen.SetActive(true);
        }
        Debug.Log("Game Over!");

        if (!hasPlayedGameOverSound && gameOverSound != null) {
            gameOverSound.Play();
            hasPlayedGameOverSound = true; 
        }
    
        gameOverScreen.SetActive(true);

        if (playerScore > highScore)
        {
            highScore = playerScore;
            PlayerPrefs.SetInt("HighScore", highScore); 
            PlayerPrefs.Save(); // Save new high score
            highScoreText.text = highScore.ToString(); // Update the high score text label!
        }
    }
     public void StartGame()
    {
        if (startScreen != null)
        {
            startScreen.SetActive(false); // Hide the start screen
        }
        gameStarted = true; // Set gameStarted to true
        Debug.Log("Game Started!");
    }

    // Coroutine to animate the score text (e.g., make it pop up and shrink)
    // The below animation function was generated by ChatGPT
    private IEnumerator AnimateScore()
    {
        // Temporarily scale the score text up
        Vector3 originalScale = scoreText.transform.localScale;
        scoreText.transform.localScale = originalScale * scorePopUpSize;

        // Wait for a short moment
        float elapsedTime = 0f;
        while (elapsedTime < scorePopUpDuration)
        {
            scoreText.transform.localScale = Vector3.Lerp(scoreText.transform.localScale, originalScale, elapsedTime / scorePopUpDuration);
            elapsedTime += Time.deltaTime;
            yield return null;
        }

        // Ensure it ends up at the original scale
        scoreText.transform.localScale = originalScale;
    }

}
